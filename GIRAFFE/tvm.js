module.exports = () => {
  const LANGUAGE = 'TvM';
  const CFG = 'configuration';

  const newline = '\n';

  function writePreamble(){
    return `% Code generated by GiraffeTools`
  }

  function parameterToCode(parameter){
    const codeArgument = parameter.code && parameter.code.find((a) => a.language === LANGUAGE);
    if (!codeArgument) return ""
    const { argument } = codeArgument;
    if (!argument) return ""
    return `${CFG}.${argument.name} = ${parameter.value}` + 
      (argument.comment ? ";" : `% ${argument.comment};`) + newline;
  }

  function itemToCode(node){
    let code = "";
    code += `${CFG} = [];` + newline;
    // #TODO add in parameters
    code += node.parameters
      .filter(parameter => parameter.value !== undefined && parameter.value !== "")
      .map(parameter => parameterToCode(parameter))
      .join("");

    const codeArgument = node.code && node.code.find((a) => a.language === LANGUAGE);

    if (!codeArgument) return ""
    const { argument } = codeArgument;
    if (!argument) return ""
    code += `${codeArgument.argument.name}(${CFG});` + newline;

    return code;
  }

  function writeNodes(nodes, links){
    return nodes.map(node => itemToCode(node)).join(newline);
  }

  function writePostamble() {
    return "% end of script"
  }

  async function writeCode(nodes, links) {
    const preamble = writePreamble();
    const nodeCode = writeNodes(nodes, links);
    const postAmble = writePostamble();
    return [preamble, nodeCode, postAmble].join(newline);
  }

  async function writeFiles(nodes, links) {
    const tvmFile = 'GIRAFFE/code/MasterScript.m';

    return {
      [tvmFile]: writeCode(nodes, links)
    };
  }

  return {
      writeCode,
      writeFiles,
  }
}
